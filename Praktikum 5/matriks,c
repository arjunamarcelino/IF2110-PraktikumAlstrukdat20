/*    NIM		: 13519021 */
/*    Nama		: Arjuna Marcelino */
/*    Tanggal		: 21 September 2020 */
/*    Topik praktikum	: Pra-Praktikum 5 */
/*    Deskripsi	: Program mengenai matriks dan mengolah matriks */		
/*    Nama file	: matriks.c */

#include "stdio.h"
#include "matriks.h"
#include "stdlib.h"
#include "math.h"

/* ********** DEFINISI PROTOTIPE PRIMITIF ********** */              
/* *** Konstruktor membentuk MATRIKS *** */
void MakeMATRIKS (int NB, int NK, MATRIKS * M)
/* Membentuk sebuah MATRIKS "kosong" yang siap diisi berukuran NB x NK di "ujung kiri" memori */
/* I.S. NB dan NK adalah valid untuk memori matriks yang dibuat */
/* F.S. Matriks M sesuai dengan definisi di atas terbentuk */
{
	NBrsEff(*M)=NB;
	NKolEff(*M)=NK;
}

/* *** Selektor "DUNIA MATRIKS" *** */
boolean IsIdxValid (int i, int j)
/* Mengirimkan true jika i, j adalah indeks yang valid untuk matriks apa pun */
{
	return (((i>=BrsMin) && (i<=BrsMax)) && ((j>=KolMin) && (j<=KolMax)));
}

/* *** Selektor: Untuk sebuah matriks M yang terdefinisi: *** */
indeks GetFirstIdxBrs (MATRIKS M)
/* Mengirimkan indeks baris terkecil M */
{
	return (BrsMin);
}

indeks GetFirstIdxKol (MATRIKS M)
/* Mengirimkan indeks kolom terkecil M */
{
	return (KolMin);
}

indeks GetLastIdxBrs (MATRIKS M)
/* Mengirimkan indeks baris terbesar M */
{
	return (NBrsEff(M)-1);
}

indeks GetLastIdxKol (MATRIKS M)
/* Mengirimkan indeks kolom terbesar M */
{
	return (NKolEff(M)-1);
}

boolean IsIdxEff (MATRIKS M, indeks i, indeks j)
/* Mengirimkan true jika i, j adalah indeks efektif bagi M */
{
	return (((i>=GetFirstIdxBrs(M)) && (i<=GetLastIdxBrs(M))) && ((j>=GetFirstIdxKol(M)) && (j<=GetLastIdxKol(M))));
}

ElType GetElmtDiagonal (MATRIKS M, indeks i)
/* Mengirimkan elemen M(i,i) */
{
	return (Elmt(M,i,i));
}

/* ********** Assignment  MATRIKS ********** */
void CopyMATRIKS (MATRIKS MIn, MATRIKS * MHsl)
/* Melakukan assignment MHsl  MIn */
{
	indeks i, j;

	for (i=0;i<=GetLastIdxBrs(MIn);i++)
	{
		for (j=0;j<=GetLastIdxKol(MIn);j++)
		{
			Elmt(*MHsl,i,j)=Elmt(MIn,i,j);
		}
	}
}


/* ********** KELOMPOK BACA/TULIS ********** */ 
void BacaMATRIKS (MATRIKS * M, int NB, int NK)
/* I.S. IsIdxValid(NB,NK) */ 
/* F.S. M terdefinisi nilai elemen efektifnya, berukuran NB x NK */
/* Proses: Melakukan MakeMATRIKS(M,NB,NK) dan mengisi nilai efektifnya */
/* Selanjutnya membaca nilai elemen per baris dan kolom */
/* Contoh: Jika NB = 3 dan NK = 3, maka contoh cara membaca isi matriks :
1 2 3
4 5 6
8 9 10 
*/
{
	indeks i, j;	
	MakeMATRIKS (NB, NK, M);
	for (i=GetFirstIdxBrs(*M);i<=GetLastIdxBrs(*M);i++)
	{
		for (j=GetFirstIdxKol(*M);j<=GetLastIdxKol(*M);j++)
		{
			scanf("%d", &Elmt(*M,i,j));
		}
	}
}

void TulisMATRIKS (MATRIKS M)
/* I.S. M terdefinisi */
/* F.S. Nilai M(i,j) ditulis ke layar per baris per kolom, masing-masing elemen per baris 
   dipisahkan sebuah spasi */
/* Proses: Menulis nilai setiap elemen M ke layar dengan traversal per baris dan per kolom */
/* Contoh: menulis matriks 3x3 (ingat di akhir tiap baris, tidak ada spasi)
1 2 3
4 5 6
8 9 10
*/
{
	indeks i, j;

	if ((NBrsEff(M)>0) && (NKolEff(M)>0))
	{
		for (i=GetFirstIdxBrs(M);i<=GetLastIdxBrs(M);i++)
		{
			for (j=GetFirstIdxKol(M);j<=GetLastIdxKol(M);j++)
			{
				if (j==GetLastIdxKol(M))
				{
					printf("%d", Elmt (M,i,j));
				}
				else
				{
					printf("%d ", Elmt (M,i,j));
				}
			}
			if (i != GetLastIdxBrs(M))
			{
				printf("\n");
			}
		}
	}
}

/* ********** KELOMPOK OPERASI ARITMATIKA TERHADAP TYPE ********** */                                  
MATRIKS TambahMATRIKS (MATRIKS M1, MATRIKS M2)
/* Prekondisi : M1  berukuran sama dengan M2 */
/* Mengirim hasil penjumlahan matriks: M1 + M2 */ 
{
	MATRIKS M;
	MakeMATRIKS (NBrsEff(M1), NKolEff(M1), &M);
	indeks i, j;
	for (i=GetFirstIdxBrs(M); i<=GetLastIdxBrs(M); i++)
	{
		for (j=GetFirstIdxKol(M); j<=GetLastIdxKol(M); j++)
		{
			Elmt(M,i,j) = Elmt(M1,i,j) + Elmt(M2,i,j);
		}
	}
	return (M);
}

MATRIKS KurangMATRIKS (MATRIKS M1, MATRIKS M2)
/* Prekondisi : M berukuran sama dengan M */
/* Mengirim hasil pengurangan matriks: salinan M1 – M2 */ 
{
	MATRIKS M;
	MakeMATRIKS (NBrsEff(M1), NKolEff(M1), &M);
	indeks i, j;
	for (i=GetFirstIdxBrs(M); i<=GetLastIdxBrs(M); i++)
	{
		for (j=GetFirstIdxKol(M); j<=GetLastIdxKol(M); j++)
		{
			Elmt(M,i,j) = Elmt(M1,i,j) - Elmt(M2,i,j);
		}
	}
	return (M);
}

MATRIKS KaliMATRIKS (MATRIKS M1, MATRIKS M2)
/* Prekondisi : Ukuran kolom efektif M1 = ukuran baris efektif M2 */
/* Mengirim hasil perkalian matriks: salinan M1 * M2 */
{
	MATRIKS M;
	indeks i,j,k;
	ElType el;
	
	MakeMATRIKS (NBrsEff(M1),NKolEff(M2),&M);
	
	for (i=GetFirstIdxBrs(M1); i<=GetLastIdxBrs(M1); i++)
	{
		for (j=GetFirstIdxBrs(M2); j<=GetLastIdxKol(M2); j++)
		{
			el=0;
			for (k=0;k<NBrsEff(M2);k++)
			{
				el = el + (Elmt(M1,i,k)*Elmt(M2,k,j));
			}
			Elmt (M,i,j) = el;
		}
	}
	return (M);
}

MATRIKS KaliKons (MATRIKS M, ElType X)
/* Mengirim hasil perkalian setiap elemen M dengan X */
{
	indeks i, j;
	for (i=0; i<=GetLastIdxBrs(M); i++)
	{
		for (j=0; j<=GetLastIdxKol(M); j++)
		{
			Elmt(M,i,j) = Elmt(M,i,j)*X;
		}
	}
	return (M);
}

void PKaliKons (MATRIKS * M, ElType K)
/* I.S. M terdefinisi, K terdefinisi */
/* F.S. Mengalikan setiap elemen M dengan K */
{
	indeks i, j;
	for (i=0; i<=GetLastIdxBrs(*M); i++)
	{
		for (j=0; j<=GetLastIdxKol(*M); j++)
		{
			Elmt(*M,i,j) = Elmt(*M,i,j)*K;
		}
	}
}

/* ********** KELOMPOK OPERASI RELASIONAL TERHADAP MATRIKS ********** */
boolean EQ (MATRIKS M1, MATRIKS M2)
/* Mengirimkan true jika M1 = M2, yaitu NBElmt(M1) = NBElmt(M2) dan */
/* untuk setiap i,j yang merupakan indeks baris dan kolom M1(i,j) = M2(i,j) */
/* Juga merupakan strong EQ karena GetFirstIdxBrs(M1) = GetFirstIdxBrs(M2) 
   dan GetLastIdxKol(M1) = GetLastIdxKol(M2) */
{
	boolean sama = true;
	indeks i,j;
	if ((GetLastIdxBrs(M1)==GetLastIdxBrs(M2)) && (GetLastIdxKol(M1)==GetLastIdxKol(M2)))
	{
		i= GetFirstIdxBrs(M1);
		while (i<=GetLastIdxBrs(M1) && sama)
		{
			j=GetFirstIdxKol(M2);
			while (j<=GetLastIdxKol(M2) && sama)
			{
				if (Elmt(M1,i,j) != Elmt(M2,i,j))
				{
					sama = false;
				}
				else
				{
					j = j+1;
				}
			}
			i=i+1;
		}
	}
	else
	{
		sama = false;
	}
	return sama;
}
   
boolean NEQ (MATRIKS M1, MATRIKS M2)
/* Mengirimkan true jika M1 tidak sama dengan M2 */
{
	return (!EQ(M1,M2));
}

boolean EQSize (MATRIKS M1, MATRIKS M2)
/* Mengirimkan true jika ukuran efektif matriks M1 sama dengan ukuran efektif M2 */
/* yaitu GetBrsEff(M1) = GetNBrsEff (M2) dan GetNKolEff (M1) = GetNKolEff (M2) */
{
	return ((NBrsEff(M1)==NBrsEff(M2)) && (NKolEff(M1)==NKolEff(M2)));
}


/* ********** Operasi lain ********** */
int NBElmt (MATRIKS M)
/* Mengirimkan banyaknya elemen M */
{
	return (NBrsEff(M)*NKolEff(M));
}

/* ********** KELOMPOK TEST TERHADAP MATRIKS ********** */
boolean IsBujurSangkar (MATRIKS M)
/* Mengirimkan true jika M adalah matriks dg ukuran baris dan kolom sama */
{
	return (NBrsEff(M)==NKolEff(M));
}

boolean IsSimetri (MATRIKS M)
/* Mengirimkan true jika M adalah matriks simetri : IsBujurSangkar(M) 
   dan untuk setiap elemen M, M(i,j)=M(j,i) */
{
	boolean simetri = true;
	indeks i,j;
	
	if(IsBujurSangkar(M))
	{
		i=GetFirstIdxBrs(M);
		while (i<=GetLastIdxBrs(M) && simetri)
		{
			j=GetFirstIdxKol(M);
			while (j<=GetLastIdxKol(M) && simetri)
			{
				if(Elmt(M,i,j) != Elmt(M,j,i))
				{
					simetri = false;
				}
				else
				{
					j=j+1;
				}
			}
			i=i+1;
		}
	}
	else 
	{
		simetri = false;
	}	
	return simetri;
}
   
boolean IsSatuan (MATRIKS M)
/* Mengirimkan true jika M adalah matriks satuan: IsBujurSangkar(M) dan 
   setiap elemen diagonal M bernilai 1 dan elemen yang bukan diagonal bernilai 0 */ 
{
	boolean satuan = true;
	indeks i,j;
	
	if(IsBujurSangkar(M))
	{
		i=GetFirstIdxBrs(M);
		while (i<=GetLastIdxBrs(M) && satuan)
		{
			j=GetFirstIdxKol(M);
			while (j<=GetLastIdxKol(M) && satuan)
			{
				if(i==j)
				{
					if(Elmt(M,i,j) != 1)
					{
						satuan = false;
					}
					else
					{
						j=j+1;
					}
				}
				else
				{
					if(Elmt(M,i,j) != 0)
					{
						satuan = false;
					}
					else
					{
						j=j+1;
					}
				}
			}
			i=i+1;
		}
	}
	else 
	{
		satuan = false;
	}	
	return satuan;
}  
boolean IsSparse (MATRIKS M)
/* Mengirimkan true jika M adalah matriks sparse: mariks “jarang” dengan definisi: 
   hanya maksimal 5% dari memori matriks yang efektif bukan bernilai 0 */ 
{
	indeks i,j;
	int count = 0;
	int num = 0;
	float persen, x, y;
	
	for (i=0; i<=GetLastIdxBrs(M); i++)
	{
		for (j=0; j<=GetLastIdxKol(M); j++)
		{
			if (Elmt(M,i,j) != 0)
			{
				count = count +1;
			}
			num = num +1;
		}
	}
	
	x = count;
	y = num;
	persen = x/y;
	return (0.05>=persen);
}
   
MATRIKS Inverse1 (MATRIKS M)
/* Menghasilkan salinan M dengan setiap elemen "di-invers", yaitu dinegasikan (dikalikan -1) */
{
	MATRIKS M1;
	indeks i,j;
	
	MakeMATRIKS(NBrsEff(M),NBrsEff(M), &M1);
	for (i=0; i<=GetLastIdxBrs(M1); i++)
	{
		for (j=0; j<=GetLastIdxKol(M1); j++)
		{
			Elmt(M1,i,j) = (-1)*Elmt(M,i,j);
		}
	}
	return (M1);
}

float Determinan (MATRIKS M)
/* Prekondisi: IsBujurSangkar(M) */
/* Menghitung nilai determinan M */
{
	float det=0;
	indeks i,j,k;
	MATRIKS MTemp;
	MakeMATRIKS (NBrsEff(M)-1, NKolEff(M)-1, &MTemp);
	if((NBrsEff(M)==2) && (NKolEff(M)==2))
	{
		det = (Elmt(M,0,0)*Elmt(M,1,1)) - (Elmt(M,0,1)*Elmt(M,1,0));
	}
	else
	{
		for (k=GetFirstIdxKol(M); k<= GetLastIdxKol(M); k++)
		{
			for (j=GetFirstIdxBrs(M)+1; i<=GetLastIdxBrs(M); i++)
			{
				if(j>k)
				{
					Elmt(MTemp,i-1,j-1) = Elmt (M,i,j);
				}
				else
				{
					Elmt(MTemp, i-1,j) = Elmt (M,i,j);
				}
			}
		}
		if (k%2==0)
		{
			det+= Elmt(M,0,k)*Determinan(MTemp);
		}
		else
		{
			det-= Elmt(M,0,k)*Determinan(MTemp);
		}
	}
	return det;
}

void PInverse1 (MATRIKS * M)
/* I.S. M terdefinisi */
/* F.S. M di-invers, yaitu setiap elemennya dinegasikan (dikalikan -1) */
{
	indeks i,j;
	
	for (i=0; i<=GetLastIdxBrs(*M); i++)
	{
		for (j=0; j<=GetLastIdxKol(*M); j++)
		{
			Elmt(*M,i,j) = (-1)*Elmt(*M,i,j);
		}
	}
}

void Transpose (MATRIKS * M)
/* I.S. M terdefinisi dan IsBujursangkar(M) */
/* F.S. M "di-transpose", yaitu setiap elemen M(i,j) ditukar nilainya dengan elemen M(j,i) */
{
	int Temp;
	indeks i,j;
	if(NBrsEff(*M) != 0 && NKolEff(*M) != 0)
	{
		for (i=GetFirstIdxBrs(*M); i<=GetLastIdxBrs(*M); i++)
		{
			for (j=i+1; j<= GetLastIdxKol (*M); j++)
			{
				Temp = Elmt(*M,i,j);
				Elmt(*M,i,j) = Elmt (*M,j,i);
				Elmt (*M,j,i)= Temp;
			}
		}
	}
}
